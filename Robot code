#pragma config(Motor,  port2,           Line1,         tmotorVex393, openLoop)
#pragma config(Motor,  port3,           Line2,         tmotorVex393, openLoop)
#pragma config(Motor,  port4,           Conveyer1,     tmotorVex393, openLoop)
#pragma config(Motor,  port5,           Conveyer2,     tmotorVex393, openLoop)
#pragma config(Motor,  port6,           Right_Wheels,  tmotorVex393HighSpeed, openLoop, reversed)
#pragma config(Motor,  port7,           Left_Wheels,   tmotorVex393HighSpeed, openLoop, reversed)
#pragma config(Motor,  port8,           Arm,           tmotorVex393, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

void Unfold()
{
  static int j=55;
  motor[Arm]=-65;
  wait1Msec(980);
  motor[Arm]=0;
  motor[Left_Wheels]=100;
  motor[Right_Wheels]=100;
  wait1Msec(2000);
  while(true)
  {
  	motor[Line1]=j;
  	motor[Line2]=j;
  	wait1Msec(300);
  	j=j-1;
  	if(j==30)
  	break;
  }
 	j=55;
  motor[Line1]=0;
  motor[Line2]=0;
}
 //2.58 , 2.63 , 2.56 , 2.56// 0.645625/1 second at full power
 // unfold the arm and extends the conveyer belt to full length.
 // wheels circumference is 13 and 10/16 inches 13.625 inches.
 // small gear 36 teeth, medium gear 60 teeth
 // 2286.248 degree rotation to reach across 1 block
void Score()
{
  motor[Left_Wheels] = 10;
  motor[Right_Wheels] = 10;
  wait1Msec(170);
  //move foward
  motor[Left_Wheels] = 10;
  motor[Right_Wheels] = -10;
  wait1Msec(135);
  //rotate 360 degrees
  motor[Line2] = 10;
  wait1Msec(230);
  //start conveyer to score
  motor[Line2] = -10;
  wait1Msec(230);
  //return conveyer to original position
  }

void Test()
{

}

task autonomous()
{
  Unfold();
  Score();
}
task drivercontrol()
{
  while(true)
  {

  }
}
task main()
{
  while(true)
  {
  	motor[Right_Wheels]=vexRT(Ch3);
  	motor[Left_Wheels]=vexRT(Ch2);
  
  	if(vexRT(Btn8L)==1)
  	{
  		Unfold();
  	}
  	if(vexRT(Btn7U)==1)
  	{
  		motor[Arm]=100;
  	}
  	else if(vexRT(Btn7D)==1)
  	{
  		motor[Arm]=-100;
  	}
  	else if((vexRT(Btn7U)==0)&&(vexRT(Btn7D)==0))
  	{
  		motor[Arm]=0;
  	}
  	if(vexRT(Btn6U)==1)
  	{
  		motor[Line1]=100;
  		motor[Line2]=100;
  	}
  	else if(vexRT(Btn6D)==1)
  	{
  		motor[Line1]=-100;
  		motor[Line2]=-100;
  	}
  	else if((vexRT(Btn6U)==0)&&(vexRT(Btn6D)==0))
		{
			motor[Line1]=0;
			motor[Line2]=0;
		}
		if(vexRT(Btn5U)==1)
		{
			motor[Conveyer1]=100;
			motor[Conveyer2]=100;
		}
		else if(vexRT(Btn5D)==1)
		{
			motor[Conveyer1]=-100;
			motor[Conveyer2]=-100;
		}
		else if((vexRT(Btn5U)==0)&&(vexRT(Btn5D)==0))
		{
			motor[Conveyer1]=0;
			motor[Conveyer2]=0;
		}
  	
  		
  	/*if((vexRT(Btn6U)==1)&&(vexRT(Btn5U)==1))
  	{
  		motor[Right_Wheels]=100;
  		motor[Left_Wheels]=100;
  	}
  	else if(vexRT(Btn5U)==1)
  	{
  		motor[Left_Wheels]=100;
  	}
  	else if(vexRT(Btn6U)==1)
  	{
  		motor[Right_Wheels]=100;
  	}
  	else if((vexRT(Btn6U)==0)&&(vexRT(Btn5U)==0))
  	{
  		motor[Right_Wheels]=0;
  		motor[Left_Wheels]=0;
  	}
  	else if(vexRT(Btn6U)==0)
  	{
  		motor[Right_Wheels]=0;
  	}
  	else if(vexRT(Btn5U)==0)
  	{
  		motor[Left_Wheels]=0;
  	}
  	else if((vexRT(Btn6D)==1)&&(vexRT(Btn5D)==1))
  	{
  		motor[Right_Wheels]=-100;
  		motor[Left_Wheels]=-100;
  	}
  	else if(vexRT(Btn5D)==1)
  	{
  		motor[Left_Wheels]=-100;
  	}
  	else if(vexRT(Btn6D)==1)
  	{
  		motor[Right_Wheels]=-100;
  	}
  	else if((vexRT(Btn5D)==0)&&(vexRT(Btn6D)==0))
  	{
  		motor[Right_Wheels]=0;
  		motor[Left_Wheels]=0;
  	}
  	else if(vexRT(Btn5D)==0)
  	{
  		motor[Left_Wheels]=0;
  	}
  	else if(vexRT(Btn6D)==0)
  	{
  		motor[Right_Wheels]=0;
  	}*/
  	//original wheel code
  }
  	
  		

}
